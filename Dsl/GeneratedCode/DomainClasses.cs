//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainClass AplicacionIPK
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.AplicacionIPK.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.AplicacionIPK.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c0a64e3a-d3cf-483d-bd3b-1d5630e1e5f6")]
	public partial class AplicacionIPK : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AplicacionIPK domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc0a64e3a, 0xd3cf, 0x483d, 0xbd, 0x3b, 0x1d, 0x56, 0x30, 0xe1, 0xe5, 0xf6);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AplicacionIPK(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AplicacionIPK(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Imagen opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Imagen.
		/// Description for CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.AplicacionIPK
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Imagen> Imagen
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Imagen>, Imagen>(global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.AplicacionIPKDomainRoleId);
			}
		}
		#endregion
		#region ConjInstr opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ConjInstr.
		/// Description for CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.AplicacionIPK
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ConjInstr> ConjInstr
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ConjInstr>, ConjInstr>(global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.AplicacionIPKDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CE.DGH_DGC_SOM_IKP.ConjInstr.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CE.DGH_DGC_SOM_IKP.Imagen.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::CE.DGH_DGC_SOM_IKP.ConjInstr sourceConjInstr1 = sourceElement as global::CE.DGH_DGC_SOM_IKP.ConjInstr;
			if (sourceConjInstr1 != null)
			{
				// Create link for path AplicacionIPKHasConjInstr.ConjInstr
				this.ConjInstr.Add(sourceConjInstr1);

				return;
			}
				
			global::CE.DGH_DGC_SOM_IKP.Imagen sourceImagen2 = sourceElement as global::CE.DGH_DGC_SOM_IKP.Imagen;
			if (sourceImagen2 != null)
			{
				// Create link for path AplicacionIPKHasImagen.Imagen
				this.Imagen.Add(sourceImagen2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::CE.DGH_DGC_SOM_IKP.ConjInstr sourceConjInstr1 = sourceElement as global::CE.DGH_DGC_SOM_IKP.ConjInstr;
			if (sourceConjInstr1 != null)
			{
				// Delete link for path AplicacionIPKHasConjInstr.ConjInstr
				
				foreach (DslModeling::ElementLink link in global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.GetLinks((global::CE.DGH_DGC_SOM_IKP.AplicacionIPK)this, sourceConjInstr1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.AplicacionIPKDomainRoleId, global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.ConjInstrDomainRoleId);
				}

				return;
			}
				
			global::CE.DGH_DGC_SOM_IKP.Imagen sourceImagen2 = sourceElement as global::CE.DGH_DGC_SOM_IKP.Imagen;
			if (sourceImagen2 != null)
			{
				// Delete link for path AplicacionIPKHasImagen.Imagen
				
				foreach (DslModeling::ElementLink link in global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.GetLinks((global::CE.DGH_DGC_SOM_IKP.AplicacionIPK)this, sourceImagen2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.AplicacionIPKDomainRoleId, global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.ImagenDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainClass Imagen
	/// Description for CE.DGH_DGC_SOM_IKP.Imagen
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.Imagen.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.Imagen.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("952e6ee7-6bb1-44f1-b95c-d2f5a0562fb4")]
	public partial class Imagen : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Imagen domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x952e6ee7, 0x6bb1, 0x44f1, 0xb9, 0x5c, 0xd2, 0xf5, 0xa0, 0x56, 0x2f, 0xb4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Imagen(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Imagen(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AplicacionIPK opposite domain role accessor
		/// <summary>
		/// Gets or sets AplicacionIPK.
		/// Description for CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.Imagen
		/// </summary>
		public virtual AplicacionIPK AplicacionIPK
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.ImagenDomainRoleId) as AplicacionIPK;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.ImagenDomainRoleId, value);
			}
		}
		#endregion
		#region Programa opposite domain role accessor
		/// <summary>
		/// Gets or sets Programa.
		/// Description for CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma.Imagen
		/// </summary>
		public virtual Programa Programa
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma.ImagenDomainRoleId) as Programa;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma.ImagenDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainClass ConjInstr
	/// Description for CE.DGH_DGC_SOM_IKP.ConjInstr
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.ConjInstr.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.ConjInstr.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f50e3bc2-ac85-4b7d-b5f1-030aeda55005")]
	public abstract partial class ConjInstr : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ConjInstr domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf50e3bc2, 0xac85, 0x4b7d, 0xb5, 0xf1, 0x03, 0x0a, 0xed, 0xa5, 0x50, 0x05);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ConjInstr(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AplicacionIPK opposite domain role accessor
		/// <summary>
		/// Gets or sets AplicacionIPK.
		/// Description for CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.ConjInstr
		/// </summary>
		public virtual AplicacionIPK AplicacionIPK
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.ConjInstrDomainRoleId) as AplicacionIPK;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.ConjInstrDomainRoleId, value);
			}
		}
		#endregion
		#region InicioPrograma opposite domain role accessor
		/// <summary>
		/// Gets or sets InicioPrograma.
		/// Description for CE.DGH_DGC_SOM_IKP.ConjInstrHasInicioPrograma.ConjInstr
		/// </summary>
		public virtual InicioPrograma InicioPrograma
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInicioPrograma.ConjInstrDomainRoleId) as InicioPrograma;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInicioPrograma.ConjInstrDomainRoleId, value);
			}
		}
		#endregion
		#region Instruccion opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Instruccion.
		/// Description for CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.ConjInstr
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Instruccion> Instruccion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Instruccion>, Instruccion>(global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.ConjInstrDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CE.DGH_DGC_SOM_IKP.Instruccion.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CE.DGH_DGC_SOM_IKP.InicioPrograma.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: ConjInstrHasInicioPrograma.InicioPrograma
					if (this.InicioPrograma != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::CE.DGH_DGC_SOM_IKP.Instruccion sourceInstruccion1 = sourceElement as global::CE.DGH_DGC_SOM_IKP.Instruccion;
			if (sourceInstruccion1 != null)
			{
				// Create link for path ConjInstrHasInstruccion.Instruccion
				this.Instruccion.Add(sourceInstruccion1);

				return;
			}
				
			global::CE.DGH_DGC_SOM_IKP.InicioPrograma sourceInicioPrograma2 = sourceElement as global::CE.DGH_DGC_SOM_IKP.InicioPrograma;
			if (sourceInicioPrograma2 != null)
			{
				// Create link for path ConjInstrHasInicioPrograma.InicioPrograma
				this.InicioPrograma = sourceInicioPrograma2;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::CE.DGH_DGC_SOM_IKP.Instruccion sourceInstruccion1 = sourceElement as global::CE.DGH_DGC_SOM_IKP.Instruccion;
			if (sourceInstruccion1 != null)
			{
				// Delete link for path ConjInstrHasInstruccion.Instruccion
				
				foreach (DslModeling::ElementLink link in global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.GetLinks((global::CE.DGH_DGC_SOM_IKP.ConjInstr)this, sourceInstruccion1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.ConjInstrDomainRoleId, global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.InstruccionDomainRoleId);
				}

				return;
			}
				
			global::CE.DGH_DGC_SOM_IKP.InicioPrograma sourceInicioPrograma2 = sourceElement as global::CE.DGH_DGC_SOM_IKP.InicioPrograma;
			if (sourceInicioPrograma2 != null)
			{
				// Delete link for path ConjInstrHasInicioPrograma.InicioPrograma
				
				foreach (DslModeling::ElementLink link in global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInicioPrograma.GetLinks((global::CE.DGH_DGC_SOM_IKP.ConjInstr)this, sourceInicioPrograma2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInicioPrograma.ConjInstrDomainRoleId, global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInicioPrograma.InicioProgramaDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainClass InstruccionIntermedias
	/// Description for CE.DGH_DGC_SOM_IKP.InstruccionIntermedias
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.InstruccionIntermedias.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.InstruccionIntermedias.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("96ae80fb-9d84-476f-94c8-b759c045c0f1")]
	public abstract partial class InstruccionIntermedias : Instruccion
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InstruccionIntermedias domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x96ae80fb, 0x9d84, 0x476f, 0x94, 0xc8, 0xb7, 0x59, 0xc0, 0x45, 0xc0, 0xf1);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected InstruccionIntermedias(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Instruccion opposite domain role accessor
		/// <summary>
		/// Gets or sets Instruccion.
		/// Description for
		/// CE.DGH_DGC_SOM_IKP.InstruccionIntermediasReferencesInstruccion.InstruccionIntermedias
		/// </summary>
		public virtual Instruccion Instruccion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.InstruccionIntermediasReferencesInstruccion.InstruccionIntermediasDomainRoleId) as Instruccion;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.InstruccionIntermediasReferencesInstruccion.InstruccionIntermediasDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainClass InsRepetir
	/// Description for CE.DGH_DGC_SOM_IKP.InsRepetir
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.InsRepetir.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.InsRepetir.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1324cdaf-c38b-4d17-bcfa-ce696cb737ca")]
	public partial class InsRepetir : InstruccionIntermedias
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InsRepetir domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1324cdaf, 0xc38b, 0x4d17, 0xbc, 0xfa, 0xce, 0x69, 0x6c, 0xb7, 0x37, 0xca);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InsRepetir(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InsRepetir(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Subprograma opposite domain role accessor
		/// <summary>
		/// Gets or sets Subprograma.
		/// Description for CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma.InsRepetir
		/// </summary>
		public virtual Subprograma Subprograma
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma.InsRepetirDomainRoleId) as Subprograma;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma.InsRepetirDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainClass InsFijar
	/// Description for CE.DGH_DGC_SOM_IKP.InsFijar
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.InsFijar.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.InsFijar.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("80346f3c-37cb-4bcd-b25a-37df08dd1490")]
	public partial class InsFijar : InstruccionIntermedias
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InsFijar domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x80346f3c, 0x37cb, 0x4bcd, 0xb2, 0x5a, 0x37, 0xdf, 0x08, 0xdd, 0x14, 0x90);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InsFijar(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InsFijar(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainClass InsApuntar
	/// Description for CE.DGH_DGC_SOM_IKP.InsApuntar
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.InsApuntar.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.InsApuntar.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("aaaaa2d7-a07d-4123-8187-f628f669caf8")]
	public partial class InsApuntar : InstruccionIntermedias
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InsApuntar domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaaaaa2d7, 0xa07d, 0x4123, 0x81, 0x87, 0xf6, 0x28, 0xf6, 0x69, 0xca, 0xf8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InsApuntar(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InsApuntar(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainClass InsPosicion
	/// Description for CE.DGH_DGC_SOM_IKP.InsPosicion
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.InsPosicion.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.InsPosicion.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("aa1d0fad-521e-4975-bf96-f2dbf2f77c12")]
	public partial class InsPosicion : InstruccionIntermedias
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InsPosicion domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaa1d0fad, 0x521e, 0x4975, 0xbf, 0x96, 0xf2, 0xdb, 0xf2, 0xf7, 0x7c, 0x12);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InsPosicion(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InsPosicion(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainClass InsMover
	/// Description for CE.DGH_DGC_SOM_IKP.InsMover
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.InsMover.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.InsMover.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a063983b-ffdb-440c-9d1a-488b9b864246")]
	public partial class InsMover : InstruccionIntermedias
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InsMover domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa063983b, 0xffdb, 0x440c, 0x9d, 0x1a, 0x48, 0x8b, 0x9b, 0x86, 0x42, 0x46);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InsMover(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InsMover(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainClass Programa
	/// Description for CE.DGH_DGC_SOM_IKP.Programa
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.Programa.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.Programa.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("05cfd294-05e0-42f0-ad83-b7ecf9b484b5")]
	public partial class Programa : ConjInstr
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Programa domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x05cfd294, 0x05e0, 0x42f0, 0xad, 0x83, 0xb7, 0xec, 0xf9, 0xb4, 0x84, 0xb5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Programa(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Programa(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Imagen opposite domain role accessor
		/// <summary>
		/// Gets or sets Imagen.
		/// Description for CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma.Programa
		/// </summary>
		public virtual Imagen Imagen
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma.ProgramaDomainRoleId) as Imagen;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma.ProgramaDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainClass Subprograma
	/// Description for CE.DGH_DGC_SOM_IKP.Subprograma
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.Subprograma.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.Subprograma.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4da57eca-484f-4ea2-b382-14163b993d53")]
	public partial class Subprograma : ConjInstr
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Subprograma domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4da57eca, 0x484f, 0x4ea2, 0xb3, 0x82, 0x14, 0x16, 0x3b, 0x99, 0x3d, 0x53);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Subprograma(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Subprograma(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region InsRepetir opposite domain role accessor
		/// <summary>
		/// Gets or sets InsRepetir.
		/// Description for CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma.Subprograma
		/// </summary>
		public virtual InsRepetir InsRepetir
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma.SubprogramaDomainRoleId) as InsRepetir;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma.SubprogramaDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainClass Instruccion
	/// Description for CE.DGH_DGC_SOM_IKP.Instruccion
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.Instruccion.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.Instruccion.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("238e12e6-1d12-4587-b0a8-ded51217ee01")]
	public abstract partial class Instruccion : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Instruccion domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x238e12e6, 0x1d12, 0x4587, 0xb0, 0xa8, 0xde, 0xd5, 0x12, 0x17, 0xee, 0x01);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Instruccion(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region InstruccionIntermedias opposite domain role accessor
		/// <summary>
		/// Gets or sets InstruccionIntermedias.
		/// Description for
		/// CE.DGH_DGC_SOM_IKP.InstruccionIntermediasReferencesInstruccion.Instruccion
		/// </summary>
		public virtual InstruccionIntermedias InstruccionIntermedias
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.InstruccionIntermediasReferencesInstruccion.InstruccionDomainRoleId) as InstruccionIntermedias;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.InstruccionIntermediasReferencesInstruccion.InstruccionDomainRoleId, value);
			}
		}
		#endregion
		#region ConjInstr opposite domain role accessor
		/// <summary>
		/// Gets or sets ConjInstr.
		/// Description for CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.Instruccion
		/// </summary>
		public virtual ConjInstr ConjInstr
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.InstruccionDomainRoleId) as ConjInstr;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.InstruccionDomainRoleId, value);
			}
		}
		#endregion
		#region InicioPrograma opposite domain role accessor
		/// <summary>
		/// Gets or sets InicioPrograma.
		/// Description for
		/// CE.DGH_DGC_SOM_IKP.InicioProgramaReferencesInstruccion.Instruccion
		/// </summary>
		public virtual InicioPrograma InicioPrograma
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.InicioProgramaReferencesInstruccion.InstruccionDomainRoleId) as InicioPrograma;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.InicioProgramaReferencesInstruccion.InstruccionDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainClass InsFin
	/// Description for CE.DGH_DGC_SOM_IKP.InsFin
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.InsFin.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.InsFin.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("40696572-d068-40fc-b225-f81d0567cb4d")]
	public partial class InsFin : Instruccion
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InsFin domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x40696572, 0xd068, 0x40fc, 0xb2, 0x25, 0xf8, 0x1d, 0x05, 0x67, 0xcb, 0x4d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InsFin(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InsFin(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainClass InicioPrograma
	/// Description for CE.DGH_DGC_SOM_IKP.InicioPrograma
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.InicioPrograma.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.InicioPrograma.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ac6431ff-9ca9-4045-ab33-c413ab33a781")]
	public partial class InicioPrograma : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InicioPrograma domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xac6431ff, 0x9ca9, 0x4045, 0xab, 0x33, 0xc4, 0x13, 0xab, 0x33, 0xa7, 0x81);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InicioPrograma(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InicioPrograma(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ConjInstr opposite domain role accessor
		/// <summary>
		/// Gets or sets ConjInstr.
		/// Description for CE.DGH_DGC_SOM_IKP.ConjInstrHasInicioPrograma.InicioPrograma
		/// </summary>
		public virtual ConjInstr ConjInstr
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInicioPrograma.InicioProgramaDomainRoleId) as ConjInstr;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInicioPrograma.InicioProgramaDomainRoleId, value);
			}
		}
		#endregion
		#region Instruccion opposite domain role accessor
		/// <summary>
		/// Gets or sets Instruccion.
		/// Description for
		/// CE.DGH_DGC_SOM_IKP.InicioProgramaReferencesInstruccion.InicioPrograma
		/// </summary>
		public virtual Instruccion Instruccion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.InicioProgramaReferencesInstruccion.InicioProgramaDomainRoleId) as Instruccion;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CE.DGH_DGC_SOM_IKP.InicioProgramaReferencesInstruccion.InicioProgramaDomainRoleId, value);
			}
		}
		#endregion
	}
}
