//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainRelationship AplicacionIPKHasImagen
	/// Description for CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1010c907-a9d8-46d1-8652-8ee03a99211e")]
	public partial class AplicacionIPKHasImagen : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AplicacionIPKHasImagen domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1010c907, 0xa9d8, 0x46d1, 0x86, 0x52, 0x8e, 0xe0, 0x3a, 0x99, 0x21, 0x1e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AplicacionIPKHasImagen link in the same Partition as the given AplicacionIPK
		/// </summary>
		/// <param name="source">AplicacionIPK to use as the source of the relationship.</param>
		/// <param name="target">Imagen to use as the target of the relationship.</param>
		public AplicacionIPKHasImagen(AplicacionIPK source, Imagen target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AplicacionIPKHasImagen.AplicacionIPKDomainRoleId, source), new DslModeling::RoleAssignment(AplicacionIPKHasImagen.ImagenDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AplicacionIPKHasImagen(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AplicacionIPKHasImagen(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AplicacionIPKHasImagen(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AplicacionIPKHasImagen(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AplicacionIPK domain role code
		
		/// <summary>
		/// AplicacionIPK domain role Id.
		/// </summary>
		public static readonly global::System.Guid AplicacionIPKDomainRoleId = new global::System.Guid(0x0080aeb5, 0x262b, 0x4366, 0xb0, 0x7b, 0x78, 0xdd, 0x00, 0xd2, 0x58, 0x37);
		
		/// <summary>
		/// DomainRole AplicacionIPK
		/// Description for CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.AplicacionIPK
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen/AplicacionIPK.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen/AplicacionIPK.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Imagen", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen/AplicacionIPK.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0080aeb5-262b-4366-b07b-78dd00d25837")]
		public virtual AplicacionIPK AplicacionIPK
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AplicacionIPK)DslModeling::DomainRoleInfo.GetRolePlayer(this, AplicacionIPKDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AplicacionIPKDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AplicacionIPK of a Imagen
		/// <summary>
		/// Gets AplicacionIPK.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AplicacionIPK GetAplicacionIPK(Imagen element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ImagenDomainRoleId) as AplicacionIPK;
		}
		
		/// <summary>
		/// Sets AplicacionIPK.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAplicacionIPK(Imagen element, AplicacionIPK newAplicacionIPK)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ImagenDomainRoleId, newAplicacionIPK);
		}
		#endregion
		#region Imagen domain role code
		
		/// <summary>
		/// Imagen domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImagenDomainRoleId = new global::System.Guid(0x7dfe0cc9, 0x103e, 0x4c9e, 0x91, 0x23, 0x2d, 0x08, 0xa9, 0xd3, 0x26, 0x8b);
		
		/// <summary>
		/// DomainRole Imagen
		/// Description for CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.Imagen
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen/Imagen.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen/Imagen.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AplicacionIPK", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen/Imagen.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7dfe0cc9-103e-4c9e-9123-2d08a9d3268b")]
		public virtual Imagen Imagen
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Imagen)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImagenDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImagenDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Imagen of a AplicacionIPK
		/// <summary>
		/// Gets a list of Imagen.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Imagen> GetImagen(AplicacionIPK element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Imagen>, Imagen>(element, AplicacionIPKDomainRoleId);
		}
		#endregion
		#region AplicacionIPK link accessor
		/// <summary>
		/// Get the list of AplicacionIPKHasImagen links to a AplicacionIPK.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen> GetLinksToImagen ( global::CE.DGH_DGC_SOM_IKP.AplicacionIPK aplicacionIPKInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen>(aplicacionIPKInstance, global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.AplicacionIPKDomainRoleId);
		}
		#endregion
		#region Imagen link accessor
		/// <summary>
		/// Get the AplicacionIPKHasImagen link to a Imagen.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen GetLinkToAplicacionIPK (global::CE.DGH_DGC_SOM_IKP.Imagen imagenInstance)
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen>(imagenInstance, global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.ImagenDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Imagen not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AplicacionIPKHasImagen instance accessors
		
		/// <summary>
		/// Get any AplicacionIPKHasImagen links between a given AplicacionIPK and a Imagen.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen> GetLinks( global::CE.DGH_DGC_SOM_IKP.AplicacionIPK source, global::CE.DGH_DGC_SOM_IKP.Imagen target )
		{
			global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen> outLinks = new global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen>();
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen>(source, global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.AplicacionIPKDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen link in links )
			{
				if ( target.Equals(link.Imagen) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AplicacionIPKHasImagen link between a given AplicacionIPKand a Imagen.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen GetLink( global::CE.DGH_DGC_SOM_IKP.AplicacionIPK source, global::CE.DGH_DGC_SOM_IKP.Imagen target )
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen>(source, global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen.AplicacionIPKDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasImagen link in links )
			{
				if ( target.Equals(link.Imagen) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainRelationship ConjInstrHasInstruccion
	/// Description for CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("85fa269b-5eb1-4e04-aa42-421f8d3acd22")]
	public partial class ConjInstrHasInstruccion : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ConjInstrHasInstruccion domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x85fa269b, 0x5eb1, 0x4e04, 0xaa, 0x42, 0x42, 0x1f, 0x8d, 0x3a, 0xcd, 0x22);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ConjInstrHasInstruccion link in the same Partition as the given ConjInstr
		/// </summary>
		/// <param name="source">ConjInstr to use as the source of the relationship.</param>
		/// <param name="target">Instruccion to use as the target of the relationship.</param>
		public ConjInstrHasInstruccion(ConjInstr source, Instruccion target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ConjInstrHasInstruccion.ConjInstrDomainRoleId, source), new DslModeling::RoleAssignment(ConjInstrHasInstruccion.InstruccionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConjInstrHasInstruccion(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConjInstrHasInstruccion(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ConjInstrHasInstruccion(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ConjInstrHasInstruccion(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConjInstr domain role code
		
		/// <summary>
		/// ConjInstr domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConjInstrDomainRoleId = new global::System.Guid(0xc1697f7d, 0x4ea1, 0x4dbb, 0x86, 0x54, 0xa5, 0xeb, 0xf9, 0x3c, 0x70, 0x91);
		
		/// <summary>
		/// DomainRole ConjInstr
		/// Description for CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.ConjInstr
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion/ConjInstr.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion/ConjInstr.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Instruccion", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion/ConjInstr.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c1697f7d-4ea1-4dbb-8654-a5ebf93c7091")]
		public virtual ConjInstr ConjInstr
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConjInstr)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConjInstrDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConjInstrDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConjInstr of a Instruccion
		/// <summary>
		/// Gets ConjInstr.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConjInstr GetConjInstr(Instruccion element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InstruccionDomainRoleId) as ConjInstr;
		}
		
		/// <summary>
		/// Sets ConjInstr.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetConjInstr(Instruccion element, ConjInstr newConjInstr)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InstruccionDomainRoleId, newConjInstr);
		}
		#endregion
		#region Instruccion domain role code
		
		/// <summary>
		/// Instruccion domain role Id.
		/// </summary>
		public static readonly global::System.Guid InstruccionDomainRoleId = new global::System.Guid(0xda6e10ad, 0x8c38, 0x47a7, 0xa6, 0xd9, 0xa5, 0x00, 0xac, 0x7d, 0x60, 0xdb);
		
		/// <summary>
		/// DomainRole Instruccion
		/// Description for CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.Instruccion
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion/Instruccion.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion/Instruccion.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ConjInstr", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion/Instruccion.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("da6e10ad-8c38-47a7-a6d9-a500ac7d60db")]
		public virtual Instruccion Instruccion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Instruccion)DslModeling::DomainRoleInfo.GetRolePlayer(this, InstruccionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InstruccionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Instruccion of a ConjInstr
		/// <summary>
		/// Gets a list of Instruccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Instruccion> GetInstruccion(ConjInstr element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Instruccion>, Instruccion>(element, ConjInstrDomainRoleId);
		}
		#endregion
		#region ConjInstr link accessor
		/// <summary>
		/// Get the list of ConjInstrHasInstruccion links to a ConjInstr.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion> GetLinksToInstruccion ( global::CE.DGH_DGC_SOM_IKP.ConjInstr conjInstrInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion>(conjInstrInstance, global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.ConjInstrDomainRoleId);
		}
		#endregion
		#region Instruccion link accessor
		/// <summary>
		/// Get the ConjInstrHasInstruccion link to a Instruccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion GetLinkToConjInstr (global::CE.DGH_DGC_SOM_IKP.Instruccion instruccionInstance)
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion>(instruccionInstance, global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.InstruccionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Instruccion not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ConjInstrHasInstruccion instance accessors
		
		/// <summary>
		/// Get any ConjInstrHasInstruccion links between a given ConjInstr and a Instruccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion> GetLinks( global::CE.DGH_DGC_SOM_IKP.ConjInstr source, global::CE.DGH_DGC_SOM_IKP.Instruccion target )
		{
			global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion> outLinks = new global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion>();
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion>(source, global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.ConjInstrDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion link in links )
			{
				if ( target.Equals(link.Instruccion) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ConjInstrHasInstruccion link between a given ConjInstrand a Instruccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion GetLink( global::CE.DGH_DGC_SOM_IKP.ConjInstr source, global::CE.DGH_DGC_SOM_IKP.Instruccion target )
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion>(source, global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion.ConjInstrDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.ConjInstrHasInstruccion link in links )
			{
				if ( target.Equals(link.Instruccion) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainRelationship ProgramaReferencesInstruccionInicial
	/// Description for CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ff42f1f1-39a4-4af7-9423-7672fa7b1a2d")]
	public partial class ProgramaReferencesInstruccionInicial : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProgramaReferencesInstruccionInicial domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xff42f1f1, 0x39a4, 0x4af7, 0x94, 0x23, 0x76, 0x72, 0xfa, 0x7b, 0x1a, 0x2d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ProgramaReferencesInstruccionInicial link in the same Partition as the given ConjInstr
		/// </summary>
		/// <param name="source">ConjInstr to use as the source of the relationship.</param>
		/// <param name="target">Instruccion to use as the target of the relationship.</param>
		public ProgramaReferencesInstruccionInicial(ConjInstr source, Instruccion target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProgramaReferencesInstruccionInicial.ConjInstrDomainRoleId, source), new DslModeling::RoleAssignment(ProgramaReferencesInstruccionInicial.InstruccionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProgramaReferencesInstruccionInicial(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProgramaReferencesInstruccionInicial(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProgramaReferencesInstruccionInicial(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProgramaReferencesInstruccionInicial(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConjInstr domain role code
		
		/// <summary>
		/// ConjInstr domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConjInstrDomainRoleId = new global::System.Guid(0x27553de1, 0x4b1a, 0x4ced, 0xad, 0x81, 0x17, 0x32, 0x8c, 0x34, 0x9b, 0x94);
		
		/// <summary>
		/// DomainRole ConjInstr
		/// Description for
		/// CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial.ConjInstr
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial/ConjInstr.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial/ConjInstr.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InstruccionInicial", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial/ConjInstr.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("27553de1-4b1a-4ced-ad81-17328c349b94")]
		public virtual ConjInstr ConjInstr
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConjInstr)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConjInstrDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConjInstrDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProgramaA of a Instruccion
		/// <summary>
		/// Gets ProgramaA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConjInstr GetProgramaA(Instruccion element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InstruccionDomainRoleId) as ConjInstr;
		}
		
		/// <summary>
		/// Sets ProgramaA.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProgramaA(Instruccion element, ConjInstr newConjInstr)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InstruccionDomainRoleId, newConjInstr);
		}
		#endregion
		#region Instruccion domain role code
		
		/// <summary>
		/// Instruccion domain role Id.
		/// </summary>
		public static readonly global::System.Guid InstruccionDomainRoleId = new global::System.Guid(0x24a373c3, 0xf2ec, 0x4c47, 0x8d, 0x82, 0x91, 0xbb, 0x32, 0x25, 0x86, 0x47);
		
		/// <summary>
		/// DomainRole Instruccion
		/// Description for
		/// CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial.Instruccion
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial/Instruccion.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial/Instruccion.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ProgramaA", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial/Instruccion.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("24a373c3-f2ec-4c47-8d82-91bb32258647")]
		public virtual Instruccion Instruccion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Instruccion)DslModeling::DomainRoleInfo.GetRolePlayer(this, InstruccionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InstruccionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InstruccionInicial of a ConjInstr
		/// <summary>
		/// Gets InstruccionInicial.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Instruccion GetInstruccionInicial(ConjInstr element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConjInstrDomainRoleId) as Instruccion;
		}
		
		/// <summary>
		/// Sets InstruccionInicial.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInstruccionInicial(ConjInstr element, Instruccion newInstruccion)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConjInstrDomainRoleId, newInstruccion);
		}
		#endregion
		#region ConjInstr link accessor
		/// <summary>
		/// Get the ProgramaReferencesInstruccionInicial link to a ConjInstr.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial GetLinkToInstruccionInicial (global::CE.DGH_DGC_SOM_IKP.ConjInstr conjInstrInstance)
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial>(conjInstrInstance, global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial.ConjInstrDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConjInstr not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Instruccion link accessor
		/// <summary>
		/// Get the ProgramaReferencesInstruccionInicial link to a Instruccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial GetLinkToProgramaA (global::CE.DGH_DGC_SOM_IKP.Instruccion instruccionInstance)
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial>(instruccionInstance, global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial.InstruccionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Instruccion not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ProgramaReferencesInstruccionInicial instance accessors
		
		/// <summary>
		/// Get any ProgramaReferencesInstruccionInicial links between a given ConjInstr and a Instruccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial> GetLinks( global::CE.DGH_DGC_SOM_IKP.ConjInstr source, global::CE.DGH_DGC_SOM_IKP.Instruccion target )
		{
			global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial> outLinks = new global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial>();
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial>(source, global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial.ConjInstrDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial link in links )
			{
				if ( target.Equals(link.Instruccion) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProgramaReferencesInstruccionInicial link between a given ConjInstrand a Instruccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial GetLink( global::CE.DGH_DGC_SOM_IKP.ConjInstr source, global::CE.DGH_DGC_SOM_IKP.Instruccion target )
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial>(source, global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial.ConjInstrDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionInicial link in links )
			{
				if ( target.Equals(link.Instruccion) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainRelationship ProgramaReferencesInstruccionFinal
	/// Description for CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("faa9fb73-b24a-4829-a5b3-a7cb7f1175b3")]
	public partial class ProgramaReferencesInstruccionFinal : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProgramaReferencesInstruccionFinal domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfaa9fb73, 0xb24a, 0x4829, 0xa5, 0xb3, 0xa7, 0xcb, 0x7f, 0x11, 0x75, 0xb3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ProgramaReferencesInstruccionFinal link in the same Partition as the given ConjInstr
		/// </summary>
		/// <param name="source">ConjInstr to use as the source of the relationship.</param>
		/// <param name="target">Instruccion to use as the target of the relationship.</param>
		public ProgramaReferencesInstruccionFinal(ConjInstr source, Instruccion target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProgramaReferencesInstruccionFinal.ConjInstrDomainRoleId, source), new DslModeling::RoleAssignment(ProgramaReferencesInstruccionFinal.InstruccionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProgramaReferencesInstruccionFinal(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProgramaReferencesInstruccionFinal(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProgramaReferencesInstruccionFinal(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProgramaReferencesInstruccionFinal(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ConjInstr domain role code
		
		/// <summary>
		/// ConjInstr domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConjInstrDomainRoleId = new global::System.Guid(0xbac43b96, 0x40f2, 0x4ad4, 0x98, 0x2b, 0x85, 0xd5, 0xd4, 0x8d, 0x67, 0x17);
		
		/// <summary>
		/// DomainRole ConjInstr
		/// Description for CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal.ConjInstr
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal/ConjInstr.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal/ConjInstr.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InstruccionFinal", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal/ConjInstr.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bac43b96-40f2-4ad4-982b-85d5d48d6717")]
		public virtual ConjInstr ConjInstr
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConjInstr)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConjInstrDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConjInstrDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProgramaB of a Instruccion
		/// <summary>
		/// Gets ProgramaB.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ConjInstr GetProgramaB(Instruccion element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InstruccionDomainRoleId) as ConjInstr;
		}
		
		/// <summary>
		/// Sets ProgramaB.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProgramaB(Instruccion element, ConjInstr newConjInstr)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InstruccionDomainRoleId, newConjInstr);
		}
		#endregion
		#region Instruccion domain role code
		
		/// <summary>
		/// Instruccion domain role Id.
		/// </summary>
		public static readonly global::System.Guid InstruccionDomainRoleId = new global::System.Guid(0x32ff2563, 0x79b8, 0x4089, 0x85, 0x17, 0xe7, 0xb8, 0xde, 0x68, 0x53, 0xd5);
		
		/// <summary>
		/// DomainRole Instruccion
		/// Description for
		/// CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal.Instruccion
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal/Instruccion.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal/Instruccion.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ProgramaB", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal/Instruccion.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("32ff2563-79b8-4089-8517-e7b8de6853d5")]
		public virtual Instruccion Instruccion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Instruccion)DslModeling::DomainRoleInfo.GetRolePlayer(this, InstruccionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InstruccionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InstruccionFinal of a ConjInstr
		/// <summary>
		/// Gets InstruccionFinal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Instruccion GetInstruccionFinal(ConjInstr element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConjInstrDomainRoleId) as Instruccion;
		}
		
		/// <summary>
		/// Sets InstruccionFinal.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInstruccionFinal(ConjInstr element, Instruccion newInstruccion)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConjInstrDomainRoleId, newInstruccion);
		}
		#endregion
		#region ConjInstr link accessor
		/// <summary>
		/// Get the ProgramaReferencesInstruccionFinal link to a ConjInstr.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal GetLinkToInstruccionFinal (global::CE.DGH_DGC_SOM_IKP.ConjInstr conjInstrInstance)
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal>(conjInstrInstance, global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal.ConjInstrDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConjInstr not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Instruccion link accessor
		/// <summary>
		/// Get the ProgramaReferencesInstruccionFinal link to a Instruccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal GetLinkToProgramaB (global::CE.DGH_DGC_SOM_IKP.Instruccion instruccionInstance)
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal>(instruccionInstance, global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal.InstruccionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Instruccion not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ProgramaReferencesInstruccionFinal instance accessors
		
		/// <summary>
		/// Get any ProgramaReferencesInstruccionFinal links between a given ConjInstr and a Instruccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal> GetLinks( global::CE.DGH_DGC_SOM_IKP.ConjInstr source, global::CE.DGH_DGC_SOM_IKP.Instruccion target )
		{
			global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal> outLinks = new global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal>();
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal>(source, global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal.ConjInstrDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal link in links )
			{
				if ( target.Equals(link.Instruccion) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProgramaReferencesInstruccionFinal link between a given ConjInstrand a Instruccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal GetLink( global::CE.DGH_DGC_SOM_IKP.ConjInstr source, global::CE.DGH_DGC_SOM_IKP.Instruccion target )
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal>(source, global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal.ConjInstrDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.ProgramaReferencesInstruccionFinal link in links )
			{
				if ( target.Equals(link.Instruccion) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainRelationship InstruccionReferencessiguiente
	/// Description for CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c3481972-5ae6-4069-9651-17b38b9ed74a")]
	public partial class InstruccionReferencessiguiente : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InstruccionReferencessiguiente domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc3481972, 0x5ae6, 0x4069, 0x96, 0x51, 0x17, 0xb3, 0x8b, 0x9e, 0xd7, 0x4a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InstruccionReferencessiguiente link in the same Partition as the given Instruccion
		/// </summary>
		/// <param name="source">Instruccion to use as the source of the relationship.</param>
		/// <param name="target">Instruccion to use as the target of the relationship.</param>
		public InstruccionReferencessiguiente(Instruccion source, Instruccion target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InstruccionReferencessiguiente.SourceInstruccionDomainRoleId, source), new DslModeling::RoleAssignment(InstruccionReferencessiguiente.TargetInstruccionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InstruccionReferencessiguiente(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InstruccionReferencessiguiente(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InstruccionReferencessiguiente(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InstruccionReferencessiguiente(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceInstruccion domain role code
		
		/// <summary>
		/// SourceInstruccion domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceInstruccionDomainRoleId = new global::System.Guid(0xf01783b4, 0x46d3, 0x4277, 0x95, 0x8a, 0xcb, 0x33, 0x30, 0x53, 0x83, 0x0b);
		
		/// <summary>
		/// DomainRole SourceInstruccion
		/// Description for
		/// CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente.SourceInstruccion
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente/SourceInstruccion.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente/SourceInstruccion.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "siguiente", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente/SourceInstruccion.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f01783b4-46d3-4277-958a-cb333053830b")]
		public virtual Instruccion SourceInstruccion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Instruccion)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceInstruccionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceInstruccionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access anterior of a Instruccion
		/// <summary>
		/// Gets anterior.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Instruccion Getanterior(Instruccion element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetInstruccionDomainRoleId) as Instruccion;
		}
		
		/// <summary>
		/// Sets anterior.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void Setanterior(Instruccion element, Instruccion newSourceInstruccion)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetInstruccionDomainRoleId, newSourceInstruccion);
		}
		#endregion
		#region TargetInstruccion domain role code
		
		/// <summary>
		/// TargetInstruccion domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetInstruccionDomainRoleId = new global::System.Guid(0x5bc8bef5, 0x7760, 0x4dc6, 0x95, 0x28, 0x06, 0xe9, 0x81, 0x77, 0xfe, 0x52);
		
		/// <summary>
		/// DomainRole TargetInstruccion
		/// Description for
		/// CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente.TargetInstruccion
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente/TargetInstruccion.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente/TargetInstruccion.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "anterior", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente/TargetInstruccion.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5bc8bef5-7760-4dc6-9528-06e98177fe52")]
		public virtual Instruccion TargetInstruccion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Instruccion)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetInstruccionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetInstruccionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access siguiente of a Instruccion
		/// <summary>
		/// Gets siguiente.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Instruccion Getsiguiente(Instruccion element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceInstruccionDomainRoleId) as Instruccion;
		}
		
		/// <summary>
		/// Sets siguiente.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void Setsiguiente(Instruccion element, Instruccion newTargetInstruccion)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceInstruccionDomainRoleId, newTargetInstruccion);
		}
		#endregion
		#region SourceInstruccion link accessor
		/// <summary>
		/// Get the InstruccionReferencessiguiente link to a Instruccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente GetLinkTosiguiente (global::CE.DGH_DGC_SOM_IKP.Instruccion sourceInstruccionInstance)
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente>(sourceInstruccionInstance, global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente.SourceInstruccionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceInstruccion not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetInstruccion link accessor
		/// <summary>
		/// Get the InstruccionReferencessiguiente link to a Instruccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente GetLinkToanterior (global::CE.DGH_DGC_SOM_IKP.Instruccion targetInstruccionInstance)
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente>(targetInstruccionInstance, global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente.TargetInstruccionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetInstruccion not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InstruccionReferencessiguiente instance accessors
		
		/// <summary>
		/// Get any InstruccionReferencessiguiente links between a given Instruccion and a Instruccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente> GetLinks( global::CE.DGH_DGC_SOM_IKP.Instruccion source, global::CE.DGH_DGC_SOM_IKP.Instruccion target )
		{
			global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente> outLinks = new global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente>();
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente>(source, global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente.SourceInstruccionDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente link in links )
			{
				if ( target.Equals(link.TargetInstruccion) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InstruccionReferencessiguiente link between a given Instruccionand a Instruccion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente GetLink( global::CE.DGH_DGC_SOM_IKP.Instruccion source, global::CE.DGH_DGC_SOM_IKP.Instruccion target )
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente>(source, global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente.SourceInstruccionDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.InstruccionReferencessiguiente link in links )
			{
				if ( target.Equals(link.TargetInstruccion) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainRelationship ImagenReferencesPrograma
	/// Description for CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("96733f5f-ba47-4fab-a34c-22c4d3846946")]
	public partial class ImagenReferencesPrograma : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ImagenReferencesPrograma domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x96733f5f, 0xba47, 0x4fab, 0xa3, 0x4c, 0x22, 0xc4, 0xd3, 0x84, 0x69, 0x46);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ImagenReferencesPrograma link in the same Partition as the given Imagen
		/// </summary>
		/// <param name="source">Imagen to use as the source of the relationship.</param>
		/// <param name="target">Programa to use as the target of the relationship.</param>
		public ImagenReferencesPrograma(Imagen source, Programa target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ImagenReferencesPrograma.ImagenDomainRoleId, source), new DslModeling::RoleAssignment(ImagenReferencesPrograma.ProgramaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImagenReferencesPrograma(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImagenReferencesPrograma(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ImagenReferencesPrograma(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ImagenReferencesPrograma(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Imagen domain role code
		
		/// <summary>
		/// Imagen domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImagenDomainRoleId = new global::System.Guid(0xa0ac96ea, 0x1456, 0x425d, 0xa1, 0xcc, 0x08, 0x16, 0xe9, 0x03, 0xca, 0x7a);
		
		/// <summary>
		/// DomainRole Imagen
		/// Description for CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma.Imagen
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma/Imagen.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma/Imagen.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Programa", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma/Imagen.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a0ac96ea-1456-425d-a1cc-0816e903ca7a")]
		public virtual Imagen Imagen
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Imagen)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImagenDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImagenDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Imagen of a Programa
		/// <summary>
		/// Gets Imagen.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Imagen GetImagen(Programa element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProgramaDomainRoleId) as Imagen;
		}
		
		/// <summary>
		/// Sets Imagen.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetImagen(Programa element, Imagen newImagen)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProgramaDomainRoleId, newImagen);
		}
		#endregion
		#region Programa domain role code
		
		/// <summary>
		/// Programa domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProgramaDomainRoleId = new global::System.Guid(0xbf3f3977, 0x8b59, 0x480c, 0x9a, 0xb0, 0x1e, 0x7f, 0xcb, 0xbb, 0x0a, 0x94);
		
		/// <summary>
		/// DomainRole Programa
		/// Description for CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma.Programa
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma/Programa.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma/Programa.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Imagen", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma/Programa.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bf3f3977-8b59-480c-9ab0-1e7fcbbb0a94")]
		public virtual Programa Programa
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Programa)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProgramaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProgramaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Programa of a Imagen
		/// <summary>
		/// Gets Programa.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Programa GetPrograma(Imagen element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ImagenDomainRoleId) as Programa;
		}
		
		/// <summary>
		/// Sets Programa.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetPrograma(Imagen element, Programa newPrograma)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ImagenDomainRoleId, newPrograma);
		}
		#endregion
		#region Imagen link accessor
		/// <summary>
		/// Get the ImagenReferencesPrograma link to a Imagen.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma GetLinkToPrograma (global::CE.DGH_DGC_SOM_IKP.Imagen imagenInstance)
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma>(imagenInstance, global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma.ImagenDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Imagen not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Programa link accessor
		/// <summary>
		/// Get the ImagenReferencesPrograma link to a Programa.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma GetLinkToImagen (global::CE.DGH_DGC_SOM_IKP.Programa programaInstance)
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma>(programaInstance, global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma.ProgramaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Programa not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ImagenReferencesPrograma instance accessors
		
		/// <summary>
		/// Get any ImagenReferencesPrograma links between a given Imagen and a Programa.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma> GetLinks( global::CE.DGH_DGC_SOM_IKP.Imagen source, global::CE.DGH_DGC_SOM_IKP.Programa target )
		{
			global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma> outLinks = new global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma>();
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma>(source, global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma.ImagenDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma link in links )
			{
				if ( target.Equals(link.Programa) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ImagenReferencesPrograma link between a given Imagenand a Programa.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma GetLink( global::CE.DGH_DGC_SOM_IKP.Imagen source, global::CE.DGH_DGC_SOM_IKP.Programa target )
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma>(source, global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma.ImagenDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.ImagenReferencesPrograma link in links )
			{
				if ( target.Equals(link.Programa) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainRelationship InsRepetirReferencesSubprograma
	/// Description for CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("91157325-5bc2-422f-bc8b-b0e35c234c20")]
	public partial class InsRepetirReferencesSubprograma : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InsRepetirReferencesSubprograma domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x91157325, 0x5bc2, 0x422f, 0xbc, 0x8b, 0xb0, 0xe3, 0x5c, 0x23, 0x4c, 0x20);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InsRepetirReferencesSubprograma link in the same Partition as the given InsRepetir
		/// </summary>
		/// <param name="source">InsRepetir to use as the source of the relationship.</param>
		/// <param name="target">Subprograma to use as the target of the relationship.</param>
		public InsRepetirReferencesSubprograma(InsRepetir source, Subprograma target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InsRepetirReferencesSubprograma.InsRepetirDomainRoleId, source), new DslModeling::RoleAssignment(InsRepetirReferencesSubprograma.SubprogramaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InsRepetirReferencesSubprograma(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InsRepetirReferencesSubprograma(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InsRepetirReferencesSubprograma(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InsRepetirReferencesSubprograma(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region InsRepetir domain role code
		
		/// <summary>
		/// InsRepetir domain role Id.
		/// </summary>
		public static readonly global::System.Guid InsRepetirDomainRoleId = new global::System.Guid(0x389bdd0f, 0x9e0c, 0x490b, 0x98, 0x37, 0x25, 0x2c, 0xa2, 0xbd, 0xa1, 0x0e);
		
		/// <summary>
		/// DomainRole InsRepetir
		/// Description for CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma.InsRepetir
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma/InsRepetir.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma/InsRepetir.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subprograma", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma/InsRepetir.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("389bdd0f-9e0c-490b-9837-252ca2bda10e")]
		public virtual InsRepetir InsRepetir
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InsRepetir)DslModeling::DomainRoleInfo.GetRolePlayer(this, InsRepetirDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InsRepetirDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InsRepetir of a Subprograma
		/// <summary>
		/// Gets InsRepetir.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static InsRepetir GetInsRepetir(Subprograma element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubprogramaDomainRoleId) as InsRepetir;
		}
		
		/// <summary>
		/// Sets InsRepetir.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInsRepetir(Subprograma element, InsRepetir newInsRepetir)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubprogramaDomainRoleId, newInsRepetir);
		}
		#endregion
		#region Subprograma domain role code
		
		/// <summary>
		/// Subprograma domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubprogramaDomainRoleId = new global::System.Guid(0x4c6ea785, 0x4e43, 0x417f, 0xbe, 0xc4, 0x2d, 0xec, 0x3a, 0xaa, 0xef, 0x0a);
		
		/// <summary>
		/// DomainRole Subprograma
		/// Description for CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma.Subprograma
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma/Subprograma.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma/Subprograma.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InsRepetir", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma/Subprograma.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4c6ea785-4e43-417f-bec4-2dec3aaaef0a")]
		public virtual Subprograma Subprograma
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Subprograma)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubprogramaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubprogramaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subprograma of a InsRepetir
		/// <summary>
		/// Gets Subprograma.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Subprograma GetSubprograma(InsRepetir element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InsRepetirDomainRoleId) as Subprograma;
		}
		
		/// <summary>
		/// Sets Subprograma.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubprograma(InsRepetir element, Subprograma newSubprograma)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InsRepetirDomainRoleId, newSubprograma);
		}
		#endregion
		#region InsRepetir link accessor
		/// <summary>
		/// Get the InsRepetirReferencesSubprograma link to a InsRepetir.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma GetLinkToSubprograma (global::CE.DGH_DGC_SOM_IKP.InsRepetir insRepetirInstance)
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma>(insRepetirInstance, global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma.InsRepetirDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InsRepetir not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Subprograma link accessor
		/// <summary>
		/// Get the InsRepetirReferencesSubprograma link to a Subprograma.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma GetLinkToInsRepetir (global::CE.DGH_DGC_SOM_IKP.Subprograma subprogramaInstance)
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma>(subprogramaInstance, global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma.SubprogramaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subprograma not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InsRepetirReferencesSubprograma instance accessors
		
		/// <summary>
		/// Get any InsRepetirReferencesSubprograma links between a given InsRepetir and a Subprograma.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma> GetLinks( global::CE.DGH_DGC_SOM_IKP.InsRepetir source, global::CE.DGH_DGC_SOM_IKP.Subprograma target )
		{
			global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma> outLinks = new global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma>();
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma>(source, global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma.InsRepetirDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma link in links )
			{
				if ( target.Equals(link.Subprograma) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InsRepetirReferencesSubprograma link between a given InsRepetirand a Subprograma.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma GetLink( global::CE.DGH_DGC_SOM_IKP.InsRepetir source, global::CE.DGH_DGC_SOM_IKP.Subprograma target )
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma>(source, global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma.InsRepetirDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.InsRepetirReferencesSubprograma link in links )
			{
				if ( target.Equals(link.Subprograma) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CE.DGH_DGC_SOM_IKP
{
	/// <summary>
	/// DomainRelationship AplicacionIPKHasConjInstr
	/// Description for CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr
	/// </summary>
	[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3c405c82-ff0a-49fe-9913-1b22ccd8056d")]
	public partial class AplicacionIPKHasConjInstr : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AplicacionIPKHasConjInstr domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3c405c82, 0xff0a, 0x49fe, 0x99, 0x13, 0x1b, 0x22, 0xcc, 0xd8, 0x05, 0x6d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AplicacionIPKHasConjInstr link in the same Partition as the given AplicacionIPK
		/// </summary>
		/// <param name="source">AplicacionIPK to use as the source of the relationship.</param>
		/// <param name="target">ConjInstr to use as the target of the relationship.</param>
		public AplicacionIPKHasConjInstr(AplicacionIPK source, ConjInstr target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AplicacionIPKHasConjInstr.AplicacionIPKDomainRoleId, source), new DslModeling::RoleAssignment(AplicacionIPKHasConjInstr.ConjInstrDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AplicacionIPKHasConjInstr(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AplicacionIPKHasConjInstr(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AplicacionIPKHasConjInstr(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AplicacionIPKHasConjInstr(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AplicacionIPK domain role code
		
		/// <summary>
		/// AplicacionIPK domain role Id.
		/// </summary>
		public static readonly global::System.Guid AplicacionIPKDomainRoleId = new global::System.Guid(0x457e9b55, 0x3f2c, 0x4278, 0x93, 0x09, 0x21, 0x5f, 0xdf, 0x3c, 0x3d, 0x76);
		
		/// <summary>
		/// DomainRole AplicacionIPK
		/// Description for CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.AplicacionIPK
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr/AplicacionIPK.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr/AplicacionIPK.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ConjInstr", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr/AplicacionIPK.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("457e9b55-3f2c-4278-9309-215fdf3c3d76")]
		public virtual AplicacionIPK AplicacionIPK
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AplicacionIPK)DslModeling::DomainRoleInfo.GetRolePlayer(this, AplicacionIPKDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AplicacionIPKDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AplicacionIPK of a ConjInstr
		/// <summary>
		/// Gets AplicacionIPK.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AplicacionIPK GetAplicacionIPK(ConjInstr element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ConjInstrDomainRoleId) as AplicacionIPK;
		}
		
		/// <summary>
		/// Sets AplicacionIPK.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAplicacionIPK(ConjInstr element, AplicacionIPK newAplicacionIPK)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ConjInstrDomainRoleId, newAplicacionIPK);
		}
		#endregion
		#region ConjInstr domain role code
		
		/// <summary>
		/// ConjInstr domain role Id.
		/// </summary>
		public static readonly global::System.Guid ConjInstrDomainRoleId = new global::System.Guid(0x5fd23919, 0xbed8, 0x4546, 0xba, 0x81, 0xea, 0x3c, 0xa7, 0xa0, 0xa0, 0xc7);
		
		/// <summary>
		/// DomainRole ConjInstr
		/// Description for CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.ConjInstr
		/// </summary>
		[DslDesign::DisplayNameResource("CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr/ConjInstr.DisplayName", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr/ConjInstr.Description", typeof(global::CE.DGH_DGC_SOM_IKP.DGH_DGC_SOM_IKPDomainModel), "CE.DGH_DGC_SOM_IKP.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AplicacionIPK", PropertyDisplayNameKey="CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr/ConjInstr.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5fd23919-bed8-4546-ba81-ea3ca7a0a0c7")]
		public virtual ConjInstr ConjInstr
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ConjInstr)DslModeling::DomainRoleInfo.GetRolePlayer(this, ConjInstrDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ConjInstrDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ConjInstr of a AplicacionIPK
		/// <summary>
		/// Gets a list of ConjInstr.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ConjInstr> GetConjInstr(AplicacionIPK element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ConjInstr>, ConjInstr>(element, AplicacionIPKDomainRoleId);
		}
		#endregion
		#region AplicacionIPK link accessor
		/// <summary>
		/// Get the list of AplicacionIPKHasConjInstr links to a AplicacionIPK.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr> GetLinksToConjInstr ( global::CE.DGH_DGC_SOM_IKP.AplicacionIPK aplicacionIPKInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr>(aplicacionIPKInstance, global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.AplicacionIPKDomainRoleId);
		}
		#endregion
		#region ConjInstr link accessor
		/// <summary>
		/// Get the AplicacionIPKHasConjInstr link to a ConjInstr.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr GetLinkToAplicacionIPK (global::CE.DGH_DGC_SOM_IKP.ConjInstr conjInstrInstance)
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr>(conjInstrInstance, global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.ConjInstrDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ConjInstr not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AplicacionIPKHasConjInstr instance accessors
		
		/// <summary>
		/// Get any AplicacionIPKHasConjInstr links between a given AplicacionIPK and a ConjInstr.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr> GetLinks( global::CE.DGH_DGC_SOM_IKP.AplicacionIPK source, global::CE.DGH_DGC_SOM_IKP.ConjInstr target )
		{
			global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr> outLinks = new global::System.Collections.Generic.List<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr>();
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr>(source, global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.AplicacionIPKDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr link in links )
			{
				if ( target.Equals(link.ConjInstr) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AplicacionIPKHasConjInstr link between a given AplicacionIPKand a ConjInstr.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr GetLink( global::CE.DGH_DGC_SOM_IKP.AplicacionIPK source, global::CE.DGH_DGC_SOM_IKP.ConjInstr target )
		{
			global::System.Collections.Generic.IList<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr>(source, global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr.AplicacionIPKDomainRoleId);
			foreach ( global::CE.DGH_DGC_SOM_IKP.AplicacionIPKHasConjInstr link in links )
			{
				if ( target.Equals(link.ConjInstr) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
